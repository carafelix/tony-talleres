---
import { Image } from "astro:assets";

const navLinks = [
  {
    name: "Nosotros",
    href: "#nosotros",
  },
  {
    name: "etc",
    href: "#etc",
  },
];

import bars from "../../assets/bars.svg";
---

<div
  class="bg-transparent fixed w-full top-0 z-10 py-[30px] h-auto flex justify-center"
>
  <nav
    aria-label="Main Navigation"
    role="navigation"
    class="w-full flex h-full items-center justify-end max-w-[1280px]"
  >
    <!-- Nav Menu -->
    <div
      id="navmenu"
      class="bg-[#fff] rounded-sm w-fit lg:bg-transparent lg:*:bg-[#fff] *:px-4 lg:py-1 absolute top-full z-10 lg:static lg:flex lg:flex-grow lg:items-center lg:justify-between overflow-hidden transition-height duration-500 h-0 lg:h-auto"
    >
    
      <!-- Nav Links -->
      <ul class="lg:flex lg:gap-10 lg:rounded-full">
        <li class="mx-4 p-4 lg:mx-0 px-0 flex justify-end">
          <a href="#home">
            LOGO
            <!-- <Image src={brand} alt="Brand Logo" class="w-[219px]" loading="eager" /> -->
          </a>
        </li>
        {
          navLinks.map((link) => {
            return (
              <li class="mx-4 p-4 lg:mx-0 px-0 flex justify-end">
                <a id={link.name} href={link.href} class="block">
                  {link.name}
                </a>
              </li>
            );
          })
        }
      </ul>

      <!-- Login -->
       <div class="lg:pb-0 lg:px-0 rounded-full mx-2 py-2 lg:py-0">
         <button class="btn-primary p-4 text-black bg-[#fff]  border border-black ">Reg√≠strate!</button>
       </div>
    </div>

    <!-- Hamburger menu -->
    <button
      aria-label="menu"
      role="button"
      aria-controls="navmenu"
      aria-expanded="false"
      id="menuButton"
      class="w-12 h-12 lg:hidden p-2 mx-1 rounded-md cursor-pointer mix-blend-difference bg-black flex justify-center align-center "
    >
      <Image src={bars} alt="hamburgerIcon" class="hamburgerIcon invert" />
    </button>
  </nav>
</div>
<script>
  document.addEventListener("DOMContentLoaded", (_) => {
    const menuButton = document.getElementById("menuButton");
    const navMenu = document.getElementById("navmenu");

    let isMenuOpen = false;

    if (menuButton && navMenu) {
      menuButton.addEventListener("click", () => {
        /* Handle the height transition */
        isMenuOpen = !isMenuOpen;

        menuButton.setAttribute("aria-expanded", `${isMenuOpen}`);

        if (isMenuOpen) {
          navMenu.style.height = `${navMenu.scrollHeight}px`;
        } else {
          navMenu.style.height = "0px";
        }
      });

      navMenu.addEventListener("click", () => {
        /* Close menu after using it */
        if (isMenuOpen) {
          isMenuOpen = false;
          navMenu.style.height = "0px";
          navMenu.classList.remove("h-auto");
        }
      });

      window.addEventListener("resize", () => {
        /* Resize cleanup screen state*/
        if (window.innerWidth >= 1024) {
          /* Add height if menu was closed and then resize happened */
          navMenu.style.height = "auto";
          navMenu.classList.remove("h-0");
        } else {
          /* Prevent opened menu when going from bit to small */
          navMenu.style.height = "0px";
        }
      });
    }
  });
</script>
