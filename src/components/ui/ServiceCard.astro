---
import { Image } from "astro:assets";
import Card from "./Card.astro";

import gob from "../../assets/svg/icon6.svg";
import wob from "../../assets/svg/icon7.svg";

/* 
1. White card with green title and green on black icon 
2. Green card with white title and green on black icon
3. Black card with white title and white on black icon
*/

const { index, titleTop, titleBottom, img, alt, link } = Astro.props;
---

<Card isUnderline={true}>
  <div
    class=`h-[300px] w-full sm:h-full lg:gap-[60px] grid custom-grid lg:grid-cols-2 lg:grid-rows-1 p-8 sm:p-[50px] rounded-[45px] ${index === 1 ? 'bg-white' : index === 2 ? 'bg-green' : 'bg-dark text-white'}`
  >
    <h3 class=`flex flex-col col-span-2 lg:col-span-1`>
      <span class='w-[fit-content] whitehead text-nowrap'
        >{titleTop}</span
      >
      <span class=`w-[fit-content] whitehead text-nowrap`
        >{titleBottom}</span
      >
    </h3>
    <picture
      class="w-full h-full row-span-1 order-1 lg:order-none lg:row-span-2 flex justify-center items-center"
    >
      <Image
        src={img}
        alt={alt}
        class="h-[100px] max-w-[100px] sm:h-auto sm:w-3/4 sm:max-w-none object-cover"
      />
    </picture>
    <div class="flex items-end">
      <a href={link} class:list={["flex items-center gap-3.5",'to_accordion']}
        ><Image src={index === 1 || index === 2 ? gob : wob } alt={alt} />
        <span class="hidden sm:block">Info Taller</span>
      </a>
    </div>
  </div>
</Card>

<style>
  .custom-grid {
    grid-template: auto auto;
  }
</style>

<script>

const links = document.querySelectorAll('.to_accordion');

links.forEach(el => el.addEventListener('click', () => {
  const href = el.getAttribute('href')

  const accordionItems = document.querySelectorAll(
      ".accordion__item"
    ) as NodeListOf<HTMLElement>;

  const accordionTarget = document.querySelector(href!) as HTMLElement
  const accordionToggle = accordionTarget.querySelector(".accordion__toggle");
  const accordionIcon = accordionTarget.querySelector(".accordion__icon");
  
      if (accordionToggle && accordionIcon) {
          // Close other accordion items
          accordionItems.forEach((otherAccordionItem) => {
            if (
              otherAccordionItem !== accordionTarget &&
              otherAccordionItem.classList.contains("active")
            ) {
              const otherAccordionToggle =
                otherAccordionItem.querySelector(".accordion__toggle");
              const otherAccordionIcon =
                otherAccordionItem.querySelector(".accordion__icon");

              if (otherAccordionToggle && otherAccordionIcon) {
                otherAccordionItem.classList.remove("active");
                otherAccordionItem.classList.remove("bg-green");
                otherAccordionToggle.setAttribute("aria-expanded", "false");
                otherAccordionItem.style.height = "160px";
                otherAccordionIcon.classList.remove("rotate-180");
                otherAccordionIcon.classList.remove("collapsed");
              }
            }
          });
          
           setTimeout(()=>{
            accordionTarget.classList.add("active");
            accordionToggle.setAttribute("aria-expanded", "true");
            // Set height according to content
            accordionTarget.style.height = accordionTarget.scrollHeight + "px";
            accordionTarget.classList.add("bg-green");
            accordionIcon.classList.add("rotate-180");
            accordionIcon.classList.add("collapsed");
           },700)
      }
}))

</script>